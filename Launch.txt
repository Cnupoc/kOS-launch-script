//////////
// This script will attempt to launch a ship into a stable (equatorial) orbit.
// It started life as the sample launch script from the wiki, but has since
// evolved into something a bit more useful.
//
// It is assumed that any stages are fair game for getting to orbit and that
// there is a single radially mounted SRB stage at the initial launch that
// overlaps with the main liquid engine(s).
//
// - al [2/14/2017]

//////////

// Orbital wishlist
SET TARGET_AP TO 130000.
SET TARGET_PE TO 130000.



// Gravity turn params
SET SPEED_MIN TO 100.
SET SPEED_STEP TO 50.
SET PITCH_MAX TO 90.
SET PITCH_MIN TO 10.
SET PITCH_STEP TO 5.

// Row to display orbit stats on
SET ROW_STATE TO 20.

// Max fuel not to count as a separator
SET SEP_SOLID TO 25.

//////////

// Identify SRB's and count any fuel in the separators
SET SOLID_EMPTY TO 1.
SET SRB_PRESENT TO 0.
SET LIQUID_EMPTY TO 1.
SET LRB_PRESENT TO 0.

//flight params
SET NEAR_APOAPSIS TO 0.
SET LEFT_ATMO TO 0.
SET STAGING_END TO 0.
SET ETA_APOAPSIS TO FALSE.

PRINT "==========================".
PRINT "-> INITIATING SYSTEMS".

PRINT "==========================".
WAIT 0.5.
PRINT ".".

WAIT 0.5.
PRINT "..".

WAIT 0.5.
PRINT "...".
WAIT 0.5.
PRINT "SYSTEMS INTIATED!".
WAIT 1.

PRINT "========================".

PRINT "-> INIATING COMMNET LINK".

PRINT "========================".

WAIT 0.5.
PRINT ".".

WAIT 0.5.
PRINT "..".

WAIT 0.5.
PRINT "...".
WAIT 0.5.
PRINT "COMMNET LINK ESTABLISHED!".
WAIT 2.
PRINT "========================".

PRINT "-> STARTING PRE-FLIGHT CHECKS".
PRINT "========================".

WAIT 1.
PRINT "->IDENTIFYING PROPULSION METHODS".
WAIT 1.
LIST ENGINES IN ENGLIST.
FOR ENG IN ENGLIST {
	IF ENG:ALLOWSHUTDOWN = FALSE {
                                SET SRB_PRESENT TO 1.
		PRINT "Found SRB " + ENG:NAME.

		FOR RES IN ENG:RESOURCES {
			PRINT "  - " + RES:NAME + " = " + RES:AMOUNT.
			IF RES:AMOUNT < SEP_SOLID {
				SET SOLID_EMPTY TO SOLID_EMPTY + RES:AMOUNT.
			}.
		}.
		WAIT 1.
	}. 
ELSE SET SRB_PRESENT TO 0.
}.
	IF SRB_PRESENT = 0 {
      PRINT "========================".

      PRINT "==== NO SRB'S FOUND!====".
      PRINT "========================".

}.
	IF SRB_PRESENT = 1 {
      PRINT "========================".
      PRINT "====  SRB'S FOUND!  ====".
      PRINT "========================".
}.
WAIT 5.

LIST ENGINES IN ENGLIST.
FOR ENG IN ENGLIST {
                IF ENG:ALLOWSHUTDOWN = TRUE {
		PRINT "Found LRB " + ENG:NAME.
		SET LRB_PRESENT TO 1.
		FOR RES IN ENG:RESOURCES {
			PRINT "  - " + RES:NAME + " = " + RES:AMOUNT.
			IF RES:AMOUNT < SEP_SOLID {
				SET LIQUID_EMPTY TO LIQUID_EMPTY + RES:AMOUNT.
			}.
		}.
	    WAIT 1.
	}.	
ELSE SET LRB_PRESENT TO 0.
}.
	IF LRB_PRESENT = 0 {
      PRINT "========================".
      PRINT "==== NO LRB'S FOUND!====".
      PRINT "========================".

	 
}. 
	IF LRB_PRESENT = 1 { 
      PRINT "========================".
      PRINT "===== LRB'S FOUND! =====".
      PRINT "========================".

}.
WAIT 2.
PRINT "========================".
PRINT "PROPULSION METHODS IDENTIFIED.".
WAIT 1.
PRINT "========================".
PRINT "PRE-FLIGHT CHECKS READY!".
WAIT 2.
PRINT "========================".
PRINT "->INTIATING COUNTDOWN".
WAIT 3.

CLEARSCREEN.

SET V0 TO GetVoice(0).

PRINT "Counting down".
FROM {local countdown is 10.} UNTIL countdown = 0 STEP {SET countdown to countdown - 1.} DO {
    PRINT "  ... " + countdown + " " AT (0,1).
	V0:PLAY( NOTE( 440, 0.25) ).
    WAIT 1.
}.

V0:PLAY( NOTE( 880, 1) ).
PRINT "Blast off!".

WHEN MAXTHRUST = 0 THEN {
    PRINT "Staging "+STAGE:NUMBER.	
    STAGE.
    PRESERVE.
}.

// Jettison srb's... ONCE
IF SRB_PRESENT = 1
WHEN STAGE:SOLIDFUEL < SOLID_EMPTY THEN {
	PRINT "Staging "+STAGE:NUMBER+"- SRB's".
	STAGE.
}.

// Jettison lrb's... ONCE
IF LRB_PRESENT = 1 {
WHEN STAGE:LIQUIDFUEL < SOLID_EMPTY THEN {
	PRINT "Staging "+STAGE:NUMBER+"- LRB's".
	STAGE.
	}.
}.


// Open the throttle, but save the mono
LOCK THROTTLE TO 1.0.
RCS OFF.

// Point straight up
SET HEAD TO HEADING(90,90).
LOCK STEERING TO HEAD.

UNTIL SHIP:APOAPSIS > TARGET_AP {

	// Resist burning up
	IF SHIP:APOAPSIS < 45000 AND SHIP:VELOCITY:SURFACE:MAG >= 1500 {
		IF THROTTLE > 0.5 PRINT "Too fast in atmo, cutting throttle to 50%".
		LOCK THROTTLE TO 0.50.
	} ELSE IF SHIP:APOAPSIS < 60000 AND SHIP:VELOCITY:SURFACE:MAG >= 2000 {
		IF THROTTLE > 0.75 PRINT "Too fast in atmo, cutting throttle to 75%".
		LOCK THROTTLE TO 0.75.
	} ELSE IF THROTTLE < 1.0 {
		PRINT "Restoring 100% throttle".
		LOCK THROTTLE TO 1.0.
	}.
	
	// Handle steering
	
	SET SPEED TO SHIP:VELOCITY:SURFACE:MAG.
	
	IF SPEED < SPEED_MIN {
		SET HEAD TO HEADING(90,PITCH_MAX).
		PRINT "Pitching straight up." AT (0,ROW_STATE).
	} ELSE {
		SET SPEED_INC TO (SPEED - SPEED_MIN) / SPEED_STEP.
		SET PITCH TO ROUND(PITCH_MAX - (SPEED_INC * PITCH_STEP),1).
		IF PITCH < PITCH_MIN SET PITCH TO PITCH_MIN.
		
		PRINT "Pitching to "+ROUND(PITCH,0)+" degrees..." AT (0,ROW_STATE).
		PRINT "  AP = "+ROUND(SHIP:APOAPSIS,0)+"      " AT (0,ROW_STATE+1).
		PRINT "  PE = "+ROUND(SHIP:PERIAPSIS,0)+"      " AT (0,ROW_STATE+2).
		
		SET HEAD TO HEADING(90,PITCH).
	}.
	
}.

PRINT "Target apoapsis reached, cutting throttle".
LOCK THROTTLE TO 0.

// We haven't engaged our burn yet
SET BURNING TO FALSE.

// We will want RCS here in case something goes wrong (like fast forward)

wait 1.

print "========================".
PRINT "STAGING COMPLETE.".
PRINT "========================".

WAIT 1.
PRINT "LOCKING HORIZON.".

SET LEFT_ATMO TO 0.
SET STAGING_END TO 1.
WAIT 1.
PRINT "LEAVING ATMOSPHERE.".
WAIT 2.
PRINT "========================".

lock steering to heading(90,0). // Look at east (90), zero degrees above the horizon

UNTIL LEFT_ATMO > 0 {
	IF STAGING_END > 0 AND SHIP:ALTITUDE > 70000 {
		PRINT "LEFT ATMOSPHERE.".
WAIT 1.
                                PRINT "========================".
WAIT 1.
		PRINT "DEPLOYING PANELS & RADIATORS.".
		PANELS ON.
		RADIATORS ON.
	
		wait 1.
                                PRINT "========================".
WAIT 1.
		print "RCS ON.".
		RCS ON.

		WAIT 5.
		PRINT "PANELS DEPLOYED.".
		SET LEFT_ATMO TO 1.
                                PRINT "========================".
WAIT 5.
	} ELSE {
	PRINT "  AP = "+ROUND(SHIP:APOAPSIS,0)+"      " AT (0,ROW_STATE+1).
	PRINT "  PE = "+ROUND(SHIP:PERIAPSIS,0)+"      " AT (0,ROW_STATE+2).
	PRINT " ETA = "+ROUND(ETA:APOAPSIS,0)+"      " AT (0,ROW_STATE+3).
	}

}.
	

WARPTO(TIME:SECONDS + ETA:APOAPSIS - 30).

UNTIL NEAR_APOAPSIS > 0 {
	
	IF ETA:APOAPSIS > 10 {
		CLEARSCREEN.
		PRINT "========================".
		PRINT "WAITING FOR APOAPSIS TO FINISH MANEUVER".
		PRINT "  AP = "+ROUND(SHIP:APOAPSIS,0)+"      " AT (0,ROW_STATE+1).
		PRINT "  PE = "+ROUND(SHIP:PERIAPSIS,0)+"      " AT (0,ROW_STATE+2).
		PRINT " ETA = "+ROUND(ETA:APOAPSIS,0)+"      " AT (0,ROW_STATE+3).
		WAIT 1.
                                SET ETA_APOAPSIS TO FALSE.
		
	} ELSE IF ETA:APOAPSIS < 10 { 
                SET ETA_APOAPSIS TO TRUE.
	SET NEAR_APOAPSIS TO 1.
          	}
}.

IF ETA_APOAPSIS = TRUE {
 	// COUNTDOWN to reach 10 SEC before apoapsis
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 10".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 9".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 8".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 7".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 6".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 5".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 4".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 3".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 2".
	WAIT 1.
CLEARSCREEN.
	PRINT "APOAPSIS REACHED IN: 1".
	WAIT 1.
                PRINT "==============================".
	PRINT "BURNING".

                WAIT 1.
	lock throttle to 1.         // Full power

	set oldEcc to orbit:eccentricity.
	until (oldEcc < orbit:eccentricity) { // Exists when the eccentricity stop dropping
		set oldEcc to orbit:eccentricity.
    
		set power to 1.
		if (orbit:eccentricity < .1) {
			// Lower the power when eccentricity < 0.1
			set power to max(.02, orbit:eccentricity*10).
		}
    
		// Radius is altitude plus planet radius
		set radius to altitude+orbit:body:radius.
    
		// Gravitational force
		set gForce to constant:G*mass*orbit:body:mass/radius^2.
    
		// Centripetal force
		set cForce to mass*ship:velocity:orbit:mag^2/radius.
    
		// Set total force
		set totalForce to gForce - cForce.
		
		// Current stage ended?
		until (maxThrust > 0) {
			stage.
		}
		set thrust to power*maxThrust.
		
		// Check if the thrust is enough to keep the v. speed at ~0m/s
		if (thrust^2-totalForce^2 < 0) {
			print "The vessel hasn't enough thrust to reach a circular orbit.".
			break.
		}
    
		// The angle above the horizon is the angle 
		set angle to arctan(totalForce/sqrt(thrust^2-totalForce^2)).
    
		// Adjust new values for throttle and steering
		lock throttle to power.
		lock steering to heading(90,angle).
    
		// Print stats+ ORBITAL DATA
		CLEARSCREEN.
		PRINT "========================".
		PRINT "PERFECTING ORBIT:".
		print "Attraction:  "+gForce.
		print "Centripetal: "+cForce.
	                PRINT "  AP = "+ROUND(SHIP:APOAPSIS,0)+"      " AT (0,ROW_STATE+1).
	                PRINT "  PE = "+ROUND(SHIP:PERIAPSIS,0)+"      " AT (0,ROW_STATE+2).
    
		// Wait one tenth of a second
		wait .1.
	}.
}.

// Shut down engines
lock throttle to 0.
PRINT "========================".
print "PERFECT ORBIT REACHED:"+orbit:eccentricity.
PRINT "Because we can.".



// This sets the user's throttle setting to zero to prevent the throttle
// from returning to the position it was at before the script was run.
SET SHIP:CONTROL:PILOTMAINTHROTTLE TO 0.