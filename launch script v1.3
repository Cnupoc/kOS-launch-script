//////////
// This script is glued together from various smaller scripts that i've found on the web. 
// it will attempt to launch a ship into a stable (equatorial) orbit.
// It started life as the sample launch script from the wiki, but has since
// evolved into something a bit more useful. 
// it will list engines and their resources to identify SRBs from separators to improve staging.
// the speed limiter that is present in the script is using throttle control to prevent burning up in the atmosphere 
// but because the pitch is handled by the velocity of the ship, to perform it's turn properly, lots of speed controls are added. 

// it's in my to-do list to make a more robust all-round pitch handling. 
//
// It is assumed that any stages are fair game for getting to orbit and that
// there is a single radially mounted SRB or LRB stage at the initial launch that
// overlaps with the main liquid engine(s). 
// 
// It should be able to handle an only solid/liquid fuel ship with overlaping initial and main stages, but it works best when it's mixed.
// 
// script will check your ship's TWR and if it will be able to sustain vertical speed during burn when perfecting orbit based on Gforce.
// 


// Orbital wishlist
SET TARGET_AP TO 130000.
SET TARGET_PE TO 130000.



// Gravity turn params
SET SPEED_MIN TO 180.
SET SPEED_STEP TO 50.
SET PITCH_MAX TO 90.
SET PITCH_MIN TO 10.
SET PITCH_STEP TO 5.

//Starting row to display orbit stats on
SET ROW_STATE TO 2.
SET MESSAGES_1 TO " ".
SET MESSAGES_2 TO " ". 
SET MESSAGES_3 TO " ". 



// Max solid fuel per engine that will count as a separator

SET SEP_SOLID TO 8.

//////////

// Identify SRB's and count any fuel in the separators
SET SRB_FUEL TO 0.
SET SOLID_BURNED TO 0.
SET SOLID_EMPTY TO 1.4.
SET SEP_FUEL TO 0.
SET SRB_PRESENT TO FALSE.
SET SEP_PRES TO FALSE.
SET LIQUID_EMPTY TO 3.
SET LIQUID_FUEL TO 1.
SET LRB_PRESENT TO TRUE.
SET SRB_RES_NAME TO "SOLID FUEL".
SET LRB_RES_NAME TO "LIQUID FUEL".



//orbital flight params
SET NEAR_APOAPSIS TO 0.
SET LEFT_ATMO TO 0.
SET ETA_APOAPSIS TO FALSE.
SET LRB_STAGED TO 0.
SET SRB_STAGED TO 0.



	
/// SETTING MESSAGE AREA OF 3 ROWS 	// TO-DO: MUST DISPLAY ALL MESSAGES ON ROWS. GET TO IT LOL 

    PRINT MESSAGES_1 AT (0,ROW_STATE).
	PRINT MESSAGES_2 AT (0,ROW_STATE+1).
	PRINT MESSAGES_3 AT (0,ROW_STATE+2).
	
	CLEARSCREEN.

	PRINT "WELCOME TO kOS". /// QUICK WELCOME MESSAGE
	WAIT 3.
	CLEARSCREEN.
	PRINT "STARTING PRE-FLIGHT CHECKS".
	WAIT 1.5.
	PRINT "->IDENTIFYING PROPULSION METHODS.".
	WAIT 1.5.
	PRINT  "->LOOKING FOR SOLID BOOSTERS.".
	WAIT 1.5.
	


/// checking engine resources to identify srbs and lrbs for the staging.
// identifying if solid engine or not
// we work with 2 types of boosters only - able to shutdown and not able to shutdown.

CLEARSCREEN.  

LIST ENGINES IN ENGLIST.
FOR ENG IN ENGLIST {
	IF ENG:ALLOWSHUTDOWN = FALSE {
		PRINT "FOUND  " + ENG:NAME.    
		FOR RES IN ENG:RESOURCES {
			SET SRB_RES_NAME TO RES:NAME.					/// setting string for engine resources depending on resource type name for later use
			PRINT SRB_RES_NAME + " - " + RES:AMOUNT. 
			IF RES:AMOUNT <= SEP_SOLID {					/// checking resource amount with our separator fuel value
															/// we're using that as a starting point to identify separator fuel from srb fuel		
				PRINT " - SEPARATOR FOUND.".
				SET SEP_SOLID TO SEP_SOLID + RES:AMOUNT.
				SET SEP_PRES TO TRUE.						/// adding up all separator fuel in to sep_solid as a single value. 															/// we're using that for the staging process when SRBs are together with separators.
			} ELSE IF RES:AMOUNT > SEP_SOLID { 
				SET SRB_PRESENT TO TRUE.					
				SET SRB_FUEL TO SRB_FUEL + RES:AMOUNT.		/// seting srb nofuel trigger to include whatever srb fuel amount for better clarification between separator and SRB solid fuel in same stage.
				PRINT " - BOOSTER FOUND.".
				
			}.
		PRINT "----------------------".
		WAIT 0.3.
		}.

	}. 
}.


IF SRB_PRESENT = FALSE {
    PRINT  "     NO SRB'S FOUND!    ".
	PRINT "----------------------".

} ELSE IF SRB_PRESENT = TRUE {
    PRINT "      SRB'S FOUND!      ".
	PRINT "----------------------".
}.

WAIT 2. 
CLEARSCREEN.  
PRINT  "===========================".
PRINT  "LOOKING FOR LIQUID BOOSTERS.".
PRINT  "===========================".
WAIT 2.

// listing engines that can be shutdown.
// it's the same process as with SRBs

LIST ENGINES IN ENGLIST.                  
FOR ENG IN ENGLIST {
    IF ENG:ALLOWSHUTDOWN = TRUE {
		PRINT  "FOUND - " + ENG:NAME.
			WAIT 0.3.
			PRINT "----------------------".
			LIST RESOURCES IN RESLIST.
			FOR RES IN RESLIST { 
				IF RES:NAME = "LIQUIDFUEL"{
					PRINT RES:NAME + " - " + RES:AMOUNT.
					SET LRB_RES_NAME TO RES:NAME.
					SET LRB_PRESENT TO TRUE.
					SET LIQUID_FUEL TO RES:AMOUNT.
				}
			}			
		}
	}.





IF LRB_PRESENT = FALSE {
	PRINT  "     NO LRB'S FOUND! ".
	PRINT "----------------------".
} ELSE IF LRB_PRESENT = TRUE { 
	PRINT  "     LRB'S FOUND! ".
	PRINT "----------------------".
}.

WAIT 2.
CLEARSCREEN.
PRINT "PROPULSION METHODS IDENTIFIED.".
	
SET SEP_FUEL TO SEP_SOLID-8.   // identifying correct separator fuel out of all the sep fuel.
							   // we start identifying with value 8, so now we remove it from the total value.

WAIT 3.
CLEARSCREEN.  
PRINT "=== LISTING RESOURCES ===".
IF SRB_PRESENT = TRUE {
	PRINT SRB_RES_NAME +" - "+ SRB_FUEL.      // solid fuel value for the main stage (if any). 
	WAIT 0.5.
} ELSE IF LRB_PRESENT = TRUE {
	PRINT LRB_RES_NAME +" - "+ LIQUID_FUEL.  // liquid fuel value for the main stage (if any). 
	WAIT 0.5.
} ELSE IF LRB_PRESENT = TRUE AND SRB_PRESENT = TRUE {
	PRINT LRB_RES_NAME +" - "+ LIQUID_FUEL.
	WAIT 0.5.
	PRINT SRB_RES_NAME +" - "+ SRB_FUEL.
	WAIT 0.5. 
} ELSE {
	PRINT "NO BOOSTERS FOUND.".
	WAIT 0.5.
}.
	
PRINT "SEPARATORS: " + SEP_FUEL.   // total separator solid fuel value
PRINT "----------------------".
WAIT 3.
PRINT "PRE-FLIGHT CHECKS READY!".
PRINT "----------------------".
PRINT "->INTIATING COUNTDOWN".
WAIT 3.


CLEARSCREEN.      /// countdown + sound
SET V0 TO GetVoice(0).
PRINT "Counting down".
FROM {local countdown is 10.} UNTIL countdown = 0 STEP {SET countdown to countdown - 1.} DO {
    CLEARSCREEN.
	PRINT "  ... " + countdown.
	V0:PLAY( NOTE( 440, 0.25) ).
    WAIT 1.
}.

V0:PLAY( NOTE( 880, 1) ).

WHEN MAXTHRUST = 0 THEN {
	SET OLD_STAGE TO STAGE:NUMBER.
	STAGE.
	SET MESSAGES_1 TO "Staging "+OLD_STAGE.
	PRESERVE.
}.

// Jettison SRB'S... ONCE
IF SRB_PRESENT = TRUE {
	SET SOLID_EMPTY TO SOLID_EMPTY+SEP_FUEL.
	WHEN STAGE:SOLIDFUEL < SOLID_EMPTY THEN {
		SET MESSAGES_1 TO "Staging "+STAGE:NUMBER+" - SRB's".
		STAGE.
	}
}

// Jettison LRB'S... ONCE
IF LRB_PRESENT = TRUE {
	WHEN STAGE:LIQUIDFUEL < LIQUID_EMPTY THEN {
		SET MESSAGES_1 TO "Staging "+STAGE:NUMBER+" - LRB's".
		STAGE.
	}.
}.

// Open the throttle, but save the mono
LOCK THROTTLE TO 1.0.
RCS OFF.

// Point straight up
SET HEAD TO HEADING(90,90).
LOCK STEERING TO HEAD.




UNTIL SHIP:APOAPSIS > TARGET_AP {
	SET SOLID_BURNED TO (STAGE:SOLIDFUEL-SEP_FUEL).
	// Resist burning up
	IF SHIP:ALTITUDE < 5000 AND SHIP:AIRSPEED >=  350 {
		IF THROTTLE > 0.50 SET MESSAGES_2 TO "Too fast in atmo, cutting throttle to 50%".
		LOCK THROTTLE TO 0.50.	
	} ELSE IF SHIP:ALTITUDE < 15000 AND SHIP:AIRSPEED >=  700 {
		IF THROTTLE > 0.50 SET MESSAGES_2 TO "Too fast in atmo, cutting throttle to 50%".
		LOCK THROTTLE TO 0.50.	
	} ELSE IF SHIP:ALTITUDE < 30000 AND SHIP:AIRSPEED >=  900 {
		IF THROTTLE > 0.50 SET MESSAGES_2 TO "Too fast in atmo, cutting throttle to 50%".
		LOCK THROTTLE TO 0.50.	
	} ELSE IF SHIP:ALTITUDE < 40000 AND SHIP:AIRSPEED >=  1200 {
		IF THROTTLE > 0.75 SET MESSAGES_2 TO "Too fast in atmo, cutting throttle to 75%".
		LOCK THROTTLE TO 0.75.
	} ELSE IF SHIP:ALTITUDE < 50000 AND SHIP:AIRSPEED >=  1600 {
		IF THROTTLE > 0.75 SET MESSAGES_2 TO "Too fast in atmo, cutting throttle to 75%".
		LOCK THROTTLE TO 0.75.
	} ELSE IF SHIP:APOAPSIS < 550000 AND SHIP:VELOCITY:SURFACE:MAG >=   2000 {
		IF THROTTLE > 0.75 SET MESSAGES_2 TO "Too fast in atmo, cutting throttle to 75%".
		LOCK THROTTLE TO 0.75.
	} ELSE IF SHIP:APOAPSIS < 62000 AND SHIP:VELOCITY:SURFACE:MAG >= 2200 {
		IF THROTTLE > 0.50 SET MESSAGES_2 TO "Too fast in atmo, cutting throttle to 50%".
		LOCK THROTTLE TO 0.50.
	} ELSE IF THROTTLE < 1.0 {
		SET MESSAGES_2 TO "Restoring 100% throttle".
		LOCK THROTTLE TO 1.0.
	}


	
	// Handle steering
	
	SET SPEED TO SHIP:VELOCITY:SURFACE:MAG.
	
	IF SPEED < SPEED_MIN {
		SET HEAD TO HEADING(90,PITCH_MAX).
		PRINT "Pitching straight up." AT (0,ROW_STATE+5).
	} ELSE {
		SET SPEED_INC TO (SPEED - SPEED_MIN) / SPEED_STEP.
		SET PITCH TO ROUND(PITCH_MAX - (SPEED_INC * PITCH_STEP),1).
		IF PITCH < PITCH_MIN SET PITCH TO PITCH_MIN.	
		SET HEAD TO HEADING(90,PITCH).
		PRINT "Pitching to "+ROUND(PITCH,0)+" degrees..." AT (0,ROW_STATE+5).
	}	
// display stats
	
	PRINT MESSAGES_1 AT (0,ROW_STATE).
	PRINT MESSAGES_2 AT (0,ROW_STATE+1).
	PRINT MESSAGES_3 AT (0,ROW_STATE+2).
	PRINT "========ORBITAL DATA========" AT (0,ROW_STATE+4).
	PRINT "  AP = "+ROUND(SHIP:APOAPSIS,0)+"      " AT (0,ROW_STATE+6).
	PRINT "  PE = "+ROUND(SHIP:PERIAPSIS,0)+"      " AT (0,ROW_STATE+7).
	PRINT " ETA = "+ROUND(ETA:APOAPSIS,0)+"      " AT (0,ROW_STATE+8).
	PRINT "======== STAGE DATA ========" AT (0,ROW_STATE+9).
	PRINT "CURRENT STAGE:  " + STAGE:NUMBER +"      " AT (0,ROW_STATE+10).
	PRINT "TOTAL LIQUID FUEL:  " + STAGE:LIQUIDFUEL + "      " AT (0,ROW_STATE+11).
	PRINT "TOTAL SOLID FUEL:  " + STAGE:SOLIDFUEL + "      " AT (0,ROW_STATE+12).
	PRINT "SEP_FUEL:   " + SEP_FUEL + "      " AT (0,ROW_STATE+13).
	wait .1.
	CLEARSCREEN.
}.
	

CLEARSCREEN.
PRINT "Target apoapsis reached, cutting throttle".
LOCK THROTTLE TO 0.
WAIT 2.


PRINT  "STAGING COMPLETE.".
PRINT  "========================".
PRINT  "LOCKING HORIZON.".
WAIT 2.

lock steering to heading(90,0). // Look at east (90), zero degrees above the horizon

UNTIL LEFT_ATMO > 0 {				 
	IF SHIP:ALTITUDE > 70100 {
		CLEARSCREEN.
		PRINT MESSAGES_1 AT (0,ROW_STATE).
		PRINT MESSAGES_2 AT (0,ROW_STATE+1).
		PRINT MESSAGES_3 AT (0,ROW_STATE+2).	
		SET MESSAGES_1 TO "DEPLOYING RCS, PANELS AND RADIATORS.". 
		SET MESSAGES_2 TO "PREPARING TO WARP.".
		PANELS ON.
		RADIATORS ON.
		RCS ON.
		WAIT 5.
		SET LEFT_ATMO TO 1.			// space flight is true, triggering exit from loop
	} ELSE {
	CLEARSCREEN.
	PRINT MESSAGES_1 AT (0,ROW_STATE).
	PRINT MESSAGES_2 AT (0,ROW_STATE+1).
	PRINT MESSAGES_3 AT (0,ROW_STATE+2).
	SET MESSAGES_1 TO "LEAVING ATMOSPHERE.".
	PRINT "===== ORBITAL DATA =====" + "      " AT (0,ROW_STATE+4).
	PRINT "  AP = "+ROUND(SHIP:APOAPSIS,0)+"      " AT (0,ROW_STATE+5).
	PRINT "  PE = "+ROUND(SHIP:PERIAPSIS,0)+"      " AT (0,ROW_STATE+6).
	PRINT " ETA = "+ROUND(ETA:APOAPSIS,0)+"      " AT (0,ROW_STATE+7).
	WAIT .1.
	}.
}.

WAIT 1.
WARPTO(TIME:SECONDS + ETA:APOAPSIS-30).
SET MESSAGES_2 TO "WARPING.".

UNTIL NEAR_APOAPSIS > 0 {
	IF ETA:APOAPSIS > 10 {				// setting trigger for ready to burn when apoapsis is T-10 sec.
		CLEARSCREEN.
		SET MESSAGES_1 TO "WAITING FOR APOAPSIS TO FINISH MANEUVER".
		PRINT MESSAGES_1 AT (0,ROW_STATE).
		PRINT MESSAGES_2 AT (0,ROW_STATE+1).
		PRINT MESSAGES_3 AT (0,ROW_STATE+2).
		PRINT "===== ORBITAL DATA =====" + "      " AT (0,ROW_STATE+4).
		PRINT "  AP = "+ROUND(SHIP:APOAPSIS,0)+"      " AT (0,ROW_STATE+5).
		PRINT "  PE = "+ROUND(SHIP:PERIAPSIS,0)+"      " AT (0,ROW_STATE+6).
		PRINT " ETA = "+ROUND(ETA:APOAPSIS,0)+"      " AT (0,ROW_STATE+7).
		WAIT 1.
        SET ETA_APOAPSIS TO FALSE.
		
	} ELSE IF ETA:APOAPSIS < 10 { 
    SET ETA_APOAPSIS TO TRUE.
	SET NEAR_APOAPSIS TO 1.
    }
}.

IF ETA_APOAPSIS = TRUE { // countdown to burn T-10sec.
	CLEARSCREEN.
	SET V0 TO GetVoice(0).
	PRINT "Counting down to eccentricity burn...".
	FROM {local countdown is 10.} UNTIL countdown = 0 STEP {SET countdown to countdown - 1.} DO {
		CLEARSCREEN.
		PRINT "  ... " + countdown.
		V0:PLAY( NOTE( 440, 0.25) ).
		WAIT 1.

	}.
}.
	
lock throttle to 1.         // Full power

set oldEcc to orbit:eccentricity.
SET ECC_ORBIT TO FALSE.		// check for finishing successfully or not.
	until (oldEcc < orbit:eccentricity) { // Exists when the eccentricity stop dropping
		set oldEcc to orbit:eccentricity.
    
		set power to 1.
		if (orbit:eccentricity < .1) {
			// Lower the power when eccentricity < 0.1
			set power to max(.02, orbit:eccentricity*10).
		}
    
		// Radius is altitude plus planet radius
		set radius to altitude+orbit:body:radius.
    
		// Gravitational force
		set gForce to constant:G*mass*orbit:body:mass/radius^2.
    
		// Centripetal force
		set cForce to mass*ship:velocity:orbit:mag^2/radius.
    
		// Set total force
		set totalForce to gForce - cForce.
		
		// Current stage ended?
		until (maxThrust > 0) {
			stage.
		}
		set thrust to power*maxThrust.
		
		// Check if the thrust is enough to keep the v. speed at ~0m/s
		if (thrust^2-totalForce^2 < 0) {
			PRINT "The vessel hasn't enough thrust to keep vertical speed to 0 m/s.".  
			break.
		}
    
		// The angle above the horizon is the angle 
		set angle to arctan(totalForce/sqrt(thrust^2-totalForce^2)).
    
		// Adjust new values for throttle and steering
		lock throttle to power.
		lock steering to heading(90,angle).
    
		// Print stats+ ORBITAL DATA
		CLEARSCREEN.
		PRINT "===== ORBITAL DATA =====" AT (0,ROW_STATE+1).
		PRINT "  AP = "+ROUND(SHIP:APOAPSIS,0)+"      " AT (0,ROW_STATE+2).
		PRINT "  PE = "+ROUND(SHIP:PERIAPSIS,0)+"      " AT (0,ROW_STATE+3).
		print "	ATT:  "+gForce+"      " AT (0,ROW_STATE+4).
		print "	CEN:  "+cForce+"      " AT (0,ROW_STATE+5).
    
		// Wait one tenth of a second
		wait .1.
		
	}.


// Shut down engines
lock throttle to 0.

CLEARSCREEN.
PRINT "========================".
print "PERFECT ORBIT REACHED! Orbit eccentricity - "+orbit:eccentricity.
PRINT "Because we can, says Bill.".

	

// This sets the user's throttle setting to zero to prevent the throttle
// from returning to the position it was at before the script was run
SET SHIP:CONTROL:PILOTMAINTHROTTLE TO 0.
